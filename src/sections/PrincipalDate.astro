---
import CalendarButton from "@/components/CalendarButton.astro"
import MapMarkerIcon from "@/icons/map-marker.astro"
import Typography from "@/components/Typography.astro"
---

<section
	class="animate-fade-in animate-delay-300 motion-reduce:animate-delay-[0s] motion-reduce:animate-duration-[0s] mx-auto my-16 flex flex-col place-items-center text-center text-primary md:my-32"
>
	<header class="text-3xl font-semibold uppercase md:text-5xl">
		<time class="date inline-block"></time>
		<span class="date-time-separator hidden">
			<span aria-hidden="true" class="mx-1 hidden md:inline">·</span>
			<br aria-hidden="true" class="block md:hidden" />
		</span>
		<time class="time hidden"></time> desde las 7 pm
	</header>

	<Typography
		as="h2"
		variant="h2"
		color="neutral"
		class:list={"underline-transition hover:text-accent mt-6 flex max-w-sm flex-col transition-all duration-300 ease-in-out motion-reduce:transition-none"}
	>
		<a
			class="flex"
			href="https://maps.app.goo.gl/TcfWqoGgGCVrQiQr6"
			target="_blank"
			rel="noopener"
			aria-label="ubicación del estadio Jose David Ugarte en google maps, se abrirá en una nueva pestaña"
		>
			<MapMarkerIcon class="mr-1 max-md:mt-1 md:mt-0.5 md:size-6" /> Estadio Jose David Ugarte
		</a>
	</Typography>

	<footer
		class="scroll-horizontal items-top mt-6 flex flex-col flex-wrap justify-center gap-9 md:flex-row *:md:basis-1/3"
	>
		<div>
			<CalendarButton />
		</div>
	</footer>
</section>

<script>
	import { EVENT_TIMESTAMP, timeZoneAbbreviations } from "@/consts/event-date"
	import { $ } from "@/lib/dom-selector"

	function getUserTimeZone(): string {
		return Intl.DateTimeFormat().resolvedOptions().timeZone
	}

	// Formatea la fecha del evento considerando la zona horaria del usuario
	function formatEventDate(timestamp: number, timeZone: string): string {
		const options: Intl.DateTimeFormatOptions = {
			day: "numeric",
			month: "long",
			timeZone,
		}
		return new Intl.DateTimeFormat("es-ES", options).format(new Date(timestamp))
	}

	// Formatea la hora del evento con el nombre de la zona horaria, ajustándose al formato de 24 horas
	function formatEventTimeWithTimeZoneName(timestamp: number, timeZone: string): string {
		const formattedTime = new Intl.DateTimeFormat("es-ES", {
			hour: "numeric",
			minute: "numeric",
			hour12: false,
			timeZone,
		}).format(new Date(timestamp))

		const timeZoneName =
			timeZoneAbbreviations[timeZone] ||
			new Intl.DateTimeFormat("es-ES", {
				timeZone,
				timeZoneName: "short",
			})
				.formatToParts(new Date(timestamp))
				.find((part) => part.type === "timeZoneName")?.value

		return `${formattedTime} ${timeZoneName}`
	}

	// Genera un datetime válido para el atributo 'datetime' del elemento <time>, respetando la zona horaria
	function formatValidDatetime(timestamp: number, timeZone: string): string {
		const options: Intl.DateTimeFormatOptions = {
			year: "numeric",
			month: "2-digit",
			day: "2-digit",
			hour: "2-digit",
			minute: "2-digit",
			second: "2-digit",
			timeZone,
			hour12: false,
		}
		return new Intl.DateTimeFormat("en-CA", options).format(new Date(timestamp))
	}

	function updateUI(
		dateString: string,
		timeString: string,
		validDatetime: string,
		{
			showTime = true,
		}: {
			showTime?: boolean
		}
	) {
		const $dateSpan = $(".date")
		const $timeSpan = $(".time")
		const $dateSeparator = $(".date-time-separator")

		if ($dateSpan != null) {
			$dateSpan.innerHTML = dateString
			$dateSpan.setAttribute("datetime", validDatetime)
		}

		if ($timeSpan != null && showTime) {
			$timeSpan.innerHTML = timeString
			$timeSpan.setAttribute("datetime", validDatetime)
			$timeSpan?.classList.remove("hidden")
			$dateSeparator?.classList.remove("hidden")
		}
	}

	function main() {
		const USER_TZ = getUserTimeZone()
		const formattedDate = formatEventDate(EVENT_TIMESTAMP, USER_TZ)
		const formattedTime = formatEventTimeWithTimeZoneName(EVENT_TIMESTAMP, USER_TZ)
		const validDatetime = formatValidDatetime(EVENT_TIMESTAMP, USER_TZ)

		updateUI(formattedDate, formattedTime, validDatetime, {
			showTime: false,
		})
	}

	document.addEventListener("DOMContentLoaded", main)

	// Verifica si el evento ya ha pasado
	const eventHasPassed = EVENT_TIMESTAMP < Date.now()
	if (eventHasPassed) {
		const addToCalendarBtn = document.getElementById("add-to-calendar")
		if (addToCalendarBtn) {
			addToCalendarBtn.remove()
		}
	}
</script>

<style>
	/* Efecto de subrayado animado */
	.underline-transition {
		background-image: linear-gradient(transparent, transparent),
			linear-gradient(var(--color-accent) 20%, var(--color-accent) 80%);
		background-size: 0 3px;
		background-position: 100% 100%;
		background-repeat: no-repeat;
		transition: background-size 0.3s ease-in-out;
	}

	@media (prefers-reduced-motion) {
		.underline-transition {
			transition: none;
		}
	}
	.underline-transition:hover {
		background-size: 100% 3px;
		background-position: 0 100%;
	}
	@media (prefers-reduced-motion) {
		.underline-transition {
			background-image: linear-gradient(transparent, transparent),
				linear-gradient(var(--color-accent) 20%, var(--color-accent) 80%);
			background-size: 0 3px;
			background-position: 100% 100%;
			background-repeat: no-repeat;
			transition: background-size 0s;
		}
		.underline-transition:hover {
			background-size: 100% 3px;
			background-position: 0 100%;
		}
	}
</style>
